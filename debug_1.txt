# Blender插件：在N面板显示GeometryNode属性（中文）
import bpy

bl_info = {
    "name": "水体生成器属性显示",
    "blender": (3, 0, 0),
    "category": "Object",
}

# 英文属性名到中文的映射
PROPERTY_NAME_MAP = {
    "Resample Length": "重采样长度",
    "Progress": "进度",
    "Droplet Min Speed": "液滴最小速度",
    "Droplet Max Speed": "液滴最大速度", 
    "Droplet Min Size": "液滴最小尺寸",
    "Droplet Max Size": "液滴最大尺寸",
    "Droplet Distance": "液滴距离",
    "Surface Noise": "表面噪声",
    "Wave Speed": "波浪速度",
    "Wave Frequency": "波浪频率",
    "Wave Area": "波浪区域",
    "Wave Amplitude": "波浪幅度",
    "Curve": "曲线",
    "Curve2": "曲线2",
}

class WATERGENERATOR_PT_GeoNodeProps(bpy.types.Panel):
    bl_label = "几何节点属性"
    bl_idname = "OBJECT_PT_geonode_props_cn"
    bl_space_type = 'VIEW_3D'
    bl_region_type = 'UI'
    bl_category = '水体生成'

    @classmethod
    def poll(cls, context):
        obj = context.active_object
        return obj and obj.modifiers and any(m.type == 'NODES' for m in obj.modifiers)

    def draw(self, context):
        layout = self.layout
        obj = context.active_object
        
        if not obj:
            layout.label(text="请选择一个物体")
            return
            
        geo_nodes_mods = [m for m in obj.modifiers if m.type == 'NODES']
        
        if not geo_nodes_mods:
            layout.label(text="没有几何节点修饰器")
            return
        
        for mod in geo_nodes_mods:
            if not mod.node_group:
                continue
                
            # 显示修饰器名称
            box = layout.box()
            box.label(text=f"修饰器: {mod.node_group.name}", icon='NODETREE')
            
            prop_count = 0
            
            # 根据调试信息，属性键的格式为 'Input_数字'
            # 创建属性索引到中文名称的映射
            input_mapping = {
                'Input_2': '重采样长度',
                'Input_3': '进度', 
                'Input_4': '液滴最小速度',
                'Input_5': '液滴最大速度',
                'Input_6': '液滴最小尺寸',
                'Input_7': '液滴最大尺寸',
                'Input_8': '液滴距离',
                'Input_9': '表面噪声',
                'Input_11': '波浪速度',
                'Input_12': '波浪频率', 
                'Input_13': '波浪区域',
                'Input_14': '波浪幅度',
                'Input_17': '曲线对象',
            }
            
            # 获取所有可用的属性键
            

            ng = mod.node_group;

            for item in ng.interface.items_tree:
                if item.in_out != 'INPUT':
                    continue
                key = item.identifier
                name = item.name
                try:
                    if item.type == 'INT' or item.type == 'FLOAT':
                        cn_name = input_mapping.get(name, name)
                        row = box.row()
                        row.label(text=cn_name + ":")
                        # row.label(text = key_name + ":")
                        row.prop(mod, f'["{key}"]', text="")
                        prop_count += 1

                
                except Exception as e:
                    print(f"Error accessing property {key}: {e}")
                    continue
                
     
            
            if prop_count == 0:
                box.label(text="没有找到可编辑的属性")
            else:
                box.label(text=f"共找到 {prop_count} 个属性")

def register():
    bpy.utils.register_class(WATERGENERATOR_PT_GeoNodeProps)

def unregister():
    bpy.utils.unregister_class(WATERGENERATOR_PT_GeoNodeProps)

# Blender插件入口
if __name__ == "__main__":
    register()





# Blender插件：在N面板显示GeometryNode属性（中文）
import bpy

bl_info = {
    "name": "水体生成器属性显示",
    "blender": (3, 0, 0),
    "category": "Object",
}

# 英文属性名到中文的映射
PROPERTY_NAME_MAP = {
    "Resample Length": "重采样长度",
    "Progress": "进度",
    "Droplet Min Speed": "液滴最小速度",
    "Droplet Max Speed": "液滴最大速度", 
    "Droplet Min Size": "液滴最小尺寸",
    "Droplet Max Size": "液滴最大尺寸",
    "Droplet Distance": "液滴距离",
    "Surface Noise": "表面噪声",
    "Wave Speed": "波浪速度",
    "Wave Frequency": "波浪频率",
    "Wave Area": "波浪区域",
    "Wave Amplitude": "波浪幅度",
    "Curve": "曲线",
    "Curve2": "曲线2",
}

class WATERGENERATOR_PT_GeoNodeProps(bpy.types.Panel):
    bl_label = "几何节点属性"
    bl_idname = "OBJECT_PT_geonode_props_cn"
    bl_space_type = 'VIEW_3D'
    bl_region_type = 'UI'
    bl_category = '水体生成'

    @classmethod
    def poll(cls, context):
        obj = context.active_object
        return obj and obj.modifiers and any(m.type == 'NODES' for m in obj.modifiers)

    def draw(self, context):
        layout = self.layout
        obj = context.active_object
        
        if not obj:
            layout.label(text="请选择一个物体")
            return
            
        geo_nodes_mods = [m for m in obj.modifiers if m.type == 'NODES']
        
        if not geo_nodes_mods:
            layout.label(text="没有几何节点修饰器")
            return
        
        for mod in geo_nodes_mods:
            if not mod.node_group:
                continue
                
            # 显示修饰器名称
            box = layout.box()
            box.label(text=f"修饰器: {mod.node_group.name}", icon='NODETREE')
            
            prop_count = 0
            
            # 根据调试信息，属性键的格式为 'Input_数字'
            # 创建属性索引到中文名称的映射
            input_mapping = {
                'Input_2': '重采样长度',
                'Input_3': '进度', 
                'Input_4': '液滴最小速度',
                'Input_5': '液滴最大速度',
                'Input_6': '液滴最小尺寸',
                'Input_7': '液滴最大尺寸',
                'Input_8': '液滴距离',
                'Input_9': '表面噪声',
                'Input_11': '波浪速度',
                'Input_12': '波浪频率', 
                'Input_13': '波浪区域',
                'Input_14': '波浪幅度',
                'Input_17': '曲线对象',
            }
            
            # 获取所有可用的属性键
            available_keys = list(mod.keys())

            ng = mod.node_group;

            for item in ng.interface.items_tree:
                if item.in_out != 'INPUT':
                    continue
                key = item.identifier
                name = item.name
                try:
                    value = mod[key]
                    if item.type == 'INT' or item.type == 'FLOAT':
                        cn_name = input_mapping.get(name, name)
                        row = box.row()
                        key_name = key
                        row.label(text=cn_name + ":")
                        # row.label(text = key_name + ":")
                        row.prop(mod, f'["{key}"]', text="")
                        prop_count += 1

                
                except Exception as e:
                    continue
                
            
            # 显示所有float类型的Input属性
            for key in sorted(available_keys):
                if key.startswith('Input_') and not key.endswith('_use_attribute') and not key.endswith('_attribute_name'):
                    try:
                        value = mod[key]
                        # float属性
                        if isinstance(value, (int, float)):
                            cn_name = input_mapping.get(key, key)
                            row = box.row()
                            key_name = key
                            # row.label(text=cn_name + ":")
                            row.label(text = key_name + ":")
                            row.prop(mod, f'["{key}"]', text="")
                            prop_count += 1
                        
                        # Vector属性 (mathutils.Vector 或有长度的数值序列)
                        elif hasattr(value, '__len__') and hasattr(value, '__getitem__'):
                            try:
                                # 检查是否为数值向量
                                if len(value) in [2, 3, 4] and all(isinstance(v, (int, float)) for v in value):
                                    cn_name = input_mapping.get(key, key)
                                    
                                    # 创建主标签
                                    col = box.column(align=True)
                                    col.label(text=cn_name + ":")
                                    
                                    # 为向量的每个分量创建输入框
                                    component_names = ['X', 'Y', 'Z', 'W'][:len(value)]
                                    for i, comp_name in enumerate(component_names):
                                        sub_row = col.row(align=True)
                                        sub_row.label(text=f"  {comp_name}:")
                                        sub_row.prop(mod, f'["{key}"]', index=i, text="")
                                    
                                    prop_count += 1
                                elif len(str(value)) < 50:  # 其他短对象
                                    cn_name = input_mapping.get(key, key)
                                    row = box.row()
                                    row.label(text=cn_name + ":")
                                    if key == 'Input_17':  # 曲线对象
                                        row.prop(mod, f'["{key}"]', text="")
                                    else:
                                        row.label(text=str(value))
                                    prop_count += 1
                            except:
                                # 如果向量访问失败，作为普通对象处理
                                if len(str(value)) < 50:
                                    cn_name = input_mapping.get(key, key)
                                    row = box.row()
                                    row.label(text=cn_name + ":")
                                    row.label(text=str(value))
                                    prop_count += 1
                        
                        elif hasattr(value, '__len__') and len(str(value)) < 50:  # 显示短字符串或对象
                            cn_name = input_mapping.get(key, key)
                            row = box.row()
                            row.label(text=cn_name + ":")
                            if key == 'Input_17':  # 曲线对象
                                row.prop(mod, f'["{key}"]', text="")
                            else:
                                row.label(text=str(value))
                            prop_count += 1
                        



                    except Exception as e:
                        continue
            
            if prop_count == 0:
                box.label(text="没有找到可编辑的属性")
            else:
                box.label(text=f"共找到 {prop_count} 个属性")

def register():
    bpy.utils.register_class(WATERGENERATOR_PT_GeoNodeProps)

def unregister():
    bpy.utils.unregister_class(WATERGENERATOR_PT_GeoNodeProps)

# Blender插件入口
if __name__ == "__main__":
    register()
